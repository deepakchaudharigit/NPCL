services:
  postgres:
    image: postgres:15-alpine
    container_name: npcl-postgres
    restart: unless-stopped
    env_file: .env.docker
    environment:
      POSTGRES_DB: npcl-auth-db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/db:/docker-entrypoint-initdb.d:ro
    networks:
      - npcl-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d npcl-auth-db"]
      interval: 10s
      timeout: 5s
      retries: 5

  app:
    build:
      context: .
    container_name: npcl-dashboard
    restart: unless-stopped
    env_file: .env.docker
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - npcl-network
    volumes:
      - ./uploads:/app/uploads
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: npcl-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - npcl-network
    command: ["redis-server", "--appendonly", "yes"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  nginx:
    image: nginx:alpine
    container_name: npcl-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - npcl-network
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:

networks:
  npcl-network:
    driver: bridge
